#!/bin/bash -e
#
# S2I assemble script for the 's2i-zuul-scheduler' image.
# The 'assemble' script builds your application source so that it is ready to run.
#
# For more information refer to the documentation:
#	https://github.com/openshift/source-to-image/blob/master/docs/builder_image.md
#

function virtualenv_bin() {
  if head "/etc/redhat-release" | grep -q "^Fedora"; then
    virtualenv-${PYTHON_VERSION} $1
  else
    virtualenv $1
  fi
}

# Install pipenv to the separate virtualenv to isolate it
# from system Python packages and packages in the main
# virtualenv. Executable is simlinked into ~/.local/bin
# to be accessible. This approach is inspired by pipsi
# (pip script installer).
function install_pipenv() {
  echo "---> Installing pipenv packaging tool ..."
  VENV_DIR=$HOME/.local/venvs/pipenv
  virtualenv_bin "$VENV_DIR"
  $VENV_DIR/bin/pip --isolated install -U pipenv
  mkdir -p $HOME/.local/bin
  ln -s $VENV_DIR/bin/pipenv $HOME/.local/bin/pipenv
}

set -e

shopt -s dotglob

# If the 's2i-zuul-scheduler' assemble script is executed with the '-h' flag, print the usage.
if [[ "$1" == "-h" ]]; then
	exec ${STI_SCRIPTS_PATH}/usage
fi

# Restore artifacts from the previous build (if they exist).
#
if [ "$(ls /tmp/artifacts/ 2>/dev/null)" ]; then
  echo "---> Restoring build artifacts..."
  cp -a /tmp/artifacts/. $APP_ROOT
  rm -rf /tmp/artifacts/
fi

echo "---> Installing application source..."
cp -Rf /tmp/src/. ./
STATUS_FILE=$APP_ROOT/.status

ZUUL_GITHUB_REPO="https://github.com/openstack-infra/zuul.git"
ZUUL_DIR=zuul
CHECKOUT_REVISION=${ZUUL_BASE_REVISION:-3.1.0}

if [[ -f ${STATUS_FILE} ]]; then
  source ${STATUS_FILE}
  if [[ "${LAST_REVISION}" == "${CHECKOUT_REVISION}" ]]; then
    echo "No changes required"
    exit 0
  fi
fi

git clone -v -b ${CHECKOUT_REVISION} ${ZUUL_SRC_URL:-$ZUUL_GITHUB_REPO} ${ZUUL_DIR}

if [[ ! -z "$UPGRADE_PIP_TO_LATEST" ]]; then
  echo "---> Upgrading pip to latest version ..."
  pip install -U pip setuptools wheel
fi

if [[ ! -z "$ENABLE_PIPENV" ]]; then
  install_pipenv
  echo "---> Installing dependencies via pipenv ..."
  if [[ -f Pipfile ]]; then
    pipenv install --deploy
  elif [[ -f "${ZUUL_DIR}/requirements.txt}" ]]; then
    pipenv install -r ${ZUUL_DIR}/requirements.txt
  fi
  # pipenv check
elif [[ -f "${ZUUL_DIR}/requirements.txt" ]]; then
  echo "---> Installing dependencies ..."
  pip install -r ${ZUUL_DIR}/requirements.txt
fi

echo "---> Building application from source..."
# TODO: Add build steps for your application, eg npm install, bundle install, pip install, etc.
pushd ${ZUUL_DIR}

if [[ -f setup.py && -z "$DISABLE_SETUP_PY_PROCESSING" ]]; then
  echo "---> Installing application ..."
  pip install .
fi

rm -rf .git
popd

echo "---> Installing provisioned application parts ..."
if [[ -f "zuul.conf" ]]; then
  cp zuul.conf /etc/zuul/zuul.conf
fi
if [[ -f "main.yaml" ]]; then
  cp main.yaml /etc/zuul/main.yaml
fi
if [[ -f "logging.conf" ]]; then
  cp logging.conf /etc/zuul/logging.conf
fi

# set permissions for any installed artifacts
fix-permissions /opt/app-root
